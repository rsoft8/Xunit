using System;
using System.ComponentModel;
using Xunit.Abstractions;
using Xunit.Internal;
using Xunit.Runner.v2;
using Xunit.v3;

namespace Xunit.Sdk
{
	/// <summary>
	/// Represents a test case that had a valid data row, but the data row was generated by a data attribute with the skip property set.
	/// </summary>
	/// <remarks>This class is only ever used if the discoverer is pre-enumerating theories and the data row is serializable.</remarks>
	public class XunitSkippedDataRowTestCase : XunitTestCase
	{
		string? skipReason;

		/// <summary/>
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Obsolete("Called by the de-serializer; should only be called by deriving classes for de-serialization purposes")]
		public XunitSkippedDataRowTestCase()
		{ }

		/// <summary>
		/// Initializes a new instance of the <see cref="XunitSkippedDataRowTestCase"/> class.
		/// </summary>
		/// <param name="testAssemblyUniqueID">The test assembly unique ID.</param>
		/// <param name="testCollectionUniqueID">The test collection unique ID.</param>
		/// <param name="testClassUniqueID">The test class unique ID.</param>
		/// <param name="testMethodUniqueID">The test method unique ID.</param>
		/// <param name="diagnosticMessageSink">The message sink which receives <see cref="_DiagnosticMessage"/> messages.</param>
		/// <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
		/// <param name="defaultMethodDisplayOptions">Default method display options to use (when not customized).</param>
		/// <param name="testMethod">The test method this test case belongs to.</param>
		/// <param name="skipReason">The reason that this test case will be skipped</param>
		/// <param name="testMethodArguments">The arguments for the test method.</param>
		public XunitSkippedDataRowTestCase(
			string testAssemblyUniqueID,
			string testCollectionUniqueID,
			string? testClassUniqueID,
			string? testMethodUniqueID,
			_IMessageSink diagnosticMessageSink,
			TestMethodDisplay defaultMethodDisplay,
			TestMethodDisplayOptions defaultMethodDisplayOptions,
			ITestMethod testMethod,
			string skipReason,
			object?[] testMethodArguments)
				: base(testAssemblyUniqueID, testCollectionUniqueID, testClassUniqueID, testMethodUniqueID, diagnosticMessageSink, defaultMethodDisplay, defaultMethodDisplayOptions, testMethod, testMethodArguments)
		{
			this.skipReason = Guard.ArgumentNotNull(nameof(skipReason), skipReason);
		}

		/// <inheritdoc/>
		public override void Deserialize(IXunitSerializationInfo info)
		{
			base.Deserialize(info);

			skipReason = info.GetValue<string>("SkipReason");
		}

		/// <inheritdoc/>
		protected override string GetSkipReason(IAttributeInfo factAttribute) =>
			skipReason ?? throw new InvalidOperationException($"Attempted to call GetSkipReason on an uninitialized '{GetType().FullName}' object");

		/// <inheritdoc/>
		public override void Serialize(IXunitSerializationInfo info)
		{
			base.Serialize(info);

			info.AddValue("SkipReason", skipReason);
		}
	}
}
