<Project DefaultTargets="Test" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="14.0">
  <UsingTask
      AssemblyFile="packages\xunit.buildtasks\tools\CodePlex.MSBuildTasks.dll"
      TaskName="CodePlex.MSBuildTasks.RegexReplace"/>
  <UsingTask
      AssemblyFile="packages\xunit.buildtasks\tools\CodePlex.MSBuildTasks.dll"
      TaskName="CodePlex.MSBuildTasks.Zip"/>

  <!-- Settings -->

  <PropertyGroup>
    <SolutionName Condition="'$(SolutionName)' == ''">xunit.vs2017.sln</SolutionName>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <ParallelizationSwitch Condition="'$(ParallelizeTests)' == 'false'">-parallel none -maxthreads 1</ParallelizationSwitch>
    <ParallelizationSwitch Condition="'$(ParallelizeTests)' != 'false'">-parallel all</ParallelizationSwitch>
    <TrackFileAccess>false</TrackFileAccess>
    <SolutionDir Condition="'$(SolutionDir)' == '' Or '$(SolutionDir)' == '*Undefined*'">$(MSBuildProjectDirectory)</SolutionDir>
    <NuGetExePath Condition="'$(NuGetExePath)' == ''">$(SolutionDir)\.nuget\nuget.exe</NuGetExePath>
    <RequestedVerbosity Condition=" '$(RequestedVerbosity)' == '' ">normal</RequestedVerbosity>
    <MyGetUrl Condition="'$(MyGetUrl)' == ''">https://www.myget.org/F/xunit/api/v2/package</MyGetUrl>
    <MyGetSymbolsUrl Condition="'$(MyGetSymbolsUrl)' == ''">https://www.myget.org/F/xunit/symbols/api/v2/package</MyGetSymbolsUrl>
  </PropertyGroup>
  <ItemGroup>
    <NuspecFiles
        Include="src\xunit.assert.source.nuspec;
                 src\xunit.core.nuspec;
                 src\xunit.nuspec" />
    <NuspecFilesWithSymbols
        Include="src\xunit.assert.nuspec;
                 src\xunit.extensibility.core.nuspec;
                 src\xunit.extensibility.execution.nuspec;
                 src\xunit.runner.console.nuspec;
                 src\xunit.runner.msbuild.nuspec;
                 src\xunit.runner.reporters.nuspec;
                 src\xunit.runner.utility.nuspec" />
    <ProjectJsonFiles Include="src\*\project.json;test\*\project.json" />
  </ItemGroup>

  <!-- Meta targets -->

  <Target Name="Build" DependsOnTargets="PackageRestore;_Build" />
  <Target Name="Test32" DependsOnTargets="Build;_Test32" />
  <Target Name="Test64" DependsOnTargets="Build;_Test64" />
  <Target Name="Test" DependsOnTargets="Test32;Test64" />
  <Target Name="CI" DependsOnTargets="DisableParallelization;Clean;PackageRestore;SetVersionNumber;Test;Packages;ZipArtifacts" />
  <Target Name="TeamCity" DependsOnTargets="CI;PushMyGet" />

  <!-- Individual targets -->

  <Target Name="DisableParallelization">
    <PropertyGroup>
      <ParallelizeTests>false</ParallelizeTests>
    </PropertyGroup>
  </Target>

  <Target Name="Clean">
    <ItemGroup>
      <CleanFileList Include="*.html;*.xml;*.nupkg;.nuget\NuGet.exe"/>
      <CleanFolderList
        Include="**\bin;
                 **\obj;
                 packages\PdbGit;
                 packages\xunit.buildtasks"/>
    </ItemGroup>
    <Delete Files="@(CleanFileList)"/>
    <RemoveDir Directories="@(CleanFolderList)" ContinueOnError="true"/>
  </Target>

  <Target Name="PackageRestore" DependsOnTargets="_DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command="&quot;$(NuGetExePath)&quot; install xunit.buildtasks -SolutionDir &quot;$(SolutionDir)&quot; -Verbosity quiet -ExcludeVersion" Condition="!Exists('$(SolutionDir)\packages\xunit.buildtasks\')" />
  </Target>

  <Target Name="_Build">
    <!-- Do "dotnet restore" here because we may have changed things before starting the build, but after PackageRestore is run -->
    <MSBuild Projects="$(SolutionName)" Properties="Configuration=$(Configuration)" Targets="restore" />
    <MSBuild Projects="$(SolutionName)" Properties="Configuration=$(Configuration)" Targets="build" />
    <MSBuild Projects="src\xunit.console\xunit.console.csproj" Properties="Configuration=$(Configuration)_x86" Targets="build" />
    <RegexReplace
        Pattern="type=&quot;Xunit.ConsoleClient.XunitConsoleConfigurationSection, xunit.console&quot;"
        Replacement="type=&quot;Xunit.ConsoleClient.XunitConsoleConfigurationSection, xunit.console.x86&quot;"
        Files="src\xunit.console\bin\$(Configuration)_x86\net452\win7-x86\xunit.console.x86.exe.config" />
  </Target>

  <Target Name="_Test32">
    <ItemGroup>
      <Test32Assemblies Include="test\test.xunit*\bin\$(Configuration)\net452\test.xunit*.dll" />
    </ItemGroup>
    <Exec Command="src\xunit.console\bin\$(Configuration)_x86\net452\win7-x86\xunit.console.x86.exe test\test.xunit1\bin\$(Configuration)\net40\test.xunit1.dll $(ParallelizationSwitch) -serialize -xml TestResults-v1-x86.xml -html TestResults-v1-x86.html" />
    <Exec Command="src\xunit.console\bin\$(Configuration)_x86\net452\win7-x86\xunit.console.x86.exe @(Test32Assemblies->'%(Identity)', ' ')                     $(ParallelizationSwitch) -serialize -xml TestResults-v2-x86.xml -html TestResults-v2-x86.html" />
  </Target>

  <Target Name="_Test64">
    <ItemGroup>
      <Test64Assemblies Include="test\test.xunit*\bin\$(Configuration)\net452\test.xunit*.dll" />
    </ItemGroup>
    <Exec Command="src\xunit.console\bin\$(Configuration)\net452\win7-x86\xunit.console.exe test\test.xunit1\bin\$(Configuration)\net40\test.xunit1.dll $(ParallelizationSwitch) -serialize -xml TestResults-v1-x64.xml -html TestResults-v1-x64.html" />
    <Exec Command="src\xunit.console\bin\$(Configuration)\net452\win7-x86\xunit.console.exe @(Test64Assemblies->'%(Identity)', ' ')                     $(ParallelizationSwitch) -serialize -xml TestResults-v2-x64.xml -html TestResults-v2-x64.html" />
  </Target>

  <Target Name="SetVersionNumber">
    <RegexReplace
        Pattern='AssemblyVersion\("99\.99\.99\.0"\)'
        Replacement='AssemblyVersion("$(BuildAssemblyVersion)")'
        Files='src\common\GlobalAssemblyInfo.cs'
        Condition=" '$(BuildAssemblyVersion)' != '' "/>
    <RegexReplace
        Pattern='99\.99\.99-dev'
        Replacement='$(BuildSemanticVersion)'
        Files='@(NuspecFiles);@(NuspecFilesWithSymbols);@(ProjectJsonFiles)'
        Condition=" '$(BuildSemanticVersion)' != '' "/>
  </Target>

  <Target Name='Packages'>
    <!-- Delete all the obj folders before packing things -->
    <ItemGroup>
      <ObjSourceFiles Include='**\obj\**\*.cs' />
    </ItemGroup>
    <Delete Files='@(ObjSourceFiles)' />

    <Exec Command='"$(NuGetExePath)" pack %(NuspecFiles.Identity) -NonInteractive -Verbosity quiet' />
    <Exec Command='"$(NuGetExePath)" pack %(NuspecFilesWithSymbols.Identity) -Symbols -NonInteractive -Verbosity quiet' />
  </Target>

  <Target Name='ZipArtifacts'>
    <ItemGroup>
      <TestResults Include="TestResults*.*" />
      <Binaries Include="*.nupkg" />
      <Binaries Include="src/xunit.runner.visualstudio.settings/bin/Release/*.vsix" />
    </ItemGroup>

    <Delete Files="test-results.zip" />
    <Zip Files="@(TestResults)" ZipFileName="test-results.zip" />

    <Delete Files="binaries.zip" />
    <Zip Files="@(Binaries)" ZipFileName="binaries.zip" StripPath="true" />
  </Target>

  <Target Name="PushMyGet" DependsOnTargets="_DownloadNuGet" Condition=" '$(ForcePushMyGet)' == 'true' Or '$(GitBranch)' == 'master' Or '$(GitBranch)' == 'refs/heads/master' ">
    <ItemGroup>
      <NupkgFiles Include="*.nupkg" Exclude="*.symbols.nupkg" />
      <NupkgSymbolsFiles Include="*.symbols.nupkg" />
    </ItemGroup>
    <Exec Command='"$(NuGetExePath)" push %(NupkgFiles.Identity) -NonInteractive -Source $(MyGetUrl)' />
    <Exec Command='"$(NuGetExePath)" push %(NupkgSymbolsFiles.Identity) -NonInteractive -Source $(MyGetSymbolsUrl)' />
  </Target>

  <Target Name="PushNuGet" DependsOnTargets="_DownloadNuGet">
    <ItemGroup>
      <NupkgFiles Include="*.nupkg" Exclude="*.symbols.nupkg" />
    </ItemGroup>
    <Exec Command='"$(NuGetExePath)" push %(NupkgFiles.Identity) -Source https://www.nuget.org/api/v2/package -NonInteractive' />
  </Target>

  <Target Name="_DownloadNuGet">
    <MakeDir Directories="$(SolutionDir)\.nuget" />
    <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition="!Exists('$(NuGetExePath)')" />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          try {
              OutputFilename = Path.GetFullPath(OutputFilename);

              Log.LogMessage("Downloading latest version of NuGet.exe...");
              WebClient webClient = new WebClient();
              webClient.DownloadFile("https://dist.nuget.org/win-x86-commandline/latest/nuget.exe", OutputFilename);

              return true;
          }
          catch (Exception ex) {
              Log.LogErrorFromException(ex);
              return false;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
